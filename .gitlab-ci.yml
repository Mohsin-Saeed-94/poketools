stages:
  - prepare
  - build
  - pretest
  - data
  - test
  - build_data
  - build_search
  - deploy
  - notify

variables:
  BUILD_NUMBER: ${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
  APP_VERSION: ${CI_COMMIT_SHORT_SHA}
  IMAGE_BASENAME: ${CI_REGISTRY}/gamestuff.info/poketools
  SYMFONY_PHPUNIT_VERSION: "8.1"

build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    COMPOSE_FILE: docker-compose.yaml
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache gcc libc-dev libffi-dev make openssl-dev py-pip python2-dev
    - pip install docker-compose
  script:
    - docker info
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose build app web
    - docker image tag app ${IMAGE_BASENAME}/app:${BUILD_NUMBER}
    - docker image tag app ${IMAGE_BASENAME}/app:${CI_COMMIT_BRANCH}
    - docker image tag web ${IMAGE_BASENAME}/web:${BUILD_NUMBER}
    - docker image tag web ${IMAGE_BASENAME}/web:${CI_COMMIT_BRANCH}
    - docker push ${IMAGE_BASENAME}/app:${BUILD_NUMBER}
    - docker push ${IMAGE_BASENAME}/app:${CI_COMMIT_BRANCH}
    - docker push ${IMAGE_BASENAME}/web:${BUILD_NUMBER}
    - docker push ${IMAGE_BASENAME}/web:${CI_COMMIT_BRANCH}

pretest-data:
  stage: pretest
  image: $IMAGE_BASENAME/app:$BUILD_NUMBER
  dependencies: []
  script:
    - bash ci_scripts/pretest-data.sh

data:
  stage: data
  image: $IMAGE_BASENAME/app:$BUILD_NUMBER
  services:
    - postgres:12
  dependencies: []
  variables:
    POSTGRES_DB: poketools
    POSTGRES_USER: poketools
    POSTGRES_PASSWORD: secret
    APP_ENV: dev
    APP_SECRET: 318586181a01928e0aca714a0e4beeb0
    DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    # Need a fake IDE env var.  It will never be used.
    IDE: phpstorm
  script:
    - bash ci_scripts/data.sh
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - template.generated.pgdump
      - data_migration_map.sqlite

test-data:
  stage: test
  image: $IMAGE_BASENAME/app:$BUILD_NUMBER
  services:
    - postgres:12
  dependencies:
    - data
  variables:
    # Don't need to checkout because this job operates in the application image
    GIT_STRATEGY: none
    POSTGRES_DB: poketools
    POSTGRES_USER: poketools
    POSTGRES_PASSWORD: secret
    APP_ENV: test
    DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    # Need a fake IDE env var.  It will never be used.
    IDE: phpstorm
  before_script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/bin/composer
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - apk add --no-cache postgresql-client
    - pg_restore --host=postgres --username=${POSTGRES_USER} --dbname=${POSTGRES_DB} --exit-on-error --no-owner --no-privileges "${CI_PROJECT_DIR}/template.generated.pgdump"
    - cd /var/www
    - composer install --prefer-dist --no-progress --no-suggest --no-interaction
    - php -d memory_limit=-1 bin/phpunit --configuration=phpunit.xml.dist --testsuite="Data Content"

build-data:
  stage: build_data
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - data
  variables:
    COMPOSE_FILE: docker-compose.yaml
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache bash
    - bash ci_scripts/build-data.sh

build-search:
  stage: build_search
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - data
  variables:
    COMPOSE_FILE: docker-compose.yaml
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
    - docker info
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - apk add --no-cache gcc libc-dev libffi-dev make openssl-dev py-pip python2-dev
    - pip install docker-compose
    # Use the previously built images when doing docker-compose up
    - docker pull ${IMAGE_BASENAME}/app:${BUILD_NUMBER}
    - docker tag ${IMAGE_BASENAME}/app:${BUILD_NUMBER} app:latest
    - docker pull ${IMAGE_BASENAME}/db:${BUILD_NUMBER}
    - docker tag ${IMAGE_BASENAME}/db:${BUILD_NUMBER} db:latest
    - docker-compose up --detach search app db
    # Wait for the containers to be ready before seeding search index
    - sleep 30
    - docker-compose exec -e DATABASE_URL=postgres://poketools:secret@db:5432/poketools app bin/console fos:elastica:populate
    - docker container commit $(docker-compose ps -q search) ${IMAGE_BASENAME}/search:${BUILD_NUMBER}
    - docker tag ${IMAGE_BASENAME}/search:${BUILD_NUMBER} ${IMAGE_BASENAME}/search:${CI_COMMIT_BRANCH}
    - docker push ${IMAGE_BASENAME}/search:${BUILD_NUMBER}
    - docker push ${IMAGE_BASENAME}/search:${CI_COMMIT_BRANCH}

deploy-data:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  image: lwolf/kubectl_deployer
  variables:
    DB_DEPLOYMENT_TMPL: ./deploy/tmpl/db-deployment.yaml
    ENVIRONMENT: "${CI_ENVIRONMENT_SLUG}"
  environment:
    name: prod
    url: http://poketools.gamestuff.info
  dependencies: []
  script:
    # This is from deploy.sh, without the iteration over all templates.
    - mkdir -p ./deploy/.generated
    - envsubst < "${DB_DEPLOYMENT_TMPL}" > "./deploy/.generated/$(basename "${DB_DEPLOYMENT_TMPL}")"
    - kubectl apply -f "./deploy/.generated/$(basename "${DB_DEPLOYMENT_TMPL}")"

deploy:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  image: lwolf/kubectl_deployer
  environment:
    name: prod
    url: http://poketools.gamestuff.info
  dependencies: []
  script:
    - /bin/sh deploy.sh ${CI_ENVIRONMENT_SLUG}

sentry:
  stage: notify
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  image: getsentry/sentry-cli
  dependencies: []
  script:
    - sentry-cli releases new -p poketools --finalize ${BUILD_NUMBER}
    - sentry-cli releases set-commits --auto ${BUILD_NUMBER}
    - sentry-cli releases deploys ${BUILD_NUMBER} new -e prod
