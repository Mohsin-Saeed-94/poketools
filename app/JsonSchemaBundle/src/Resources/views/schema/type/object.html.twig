{% extends '@JsonSchema/schema/type/type.html.twig' %}
{# /** @var \DragoonBoots\JsonSchemaBundle\Schema\Type\SchemaObject schema */ #}

{% block basics %}
    {% import '@JsonSchema/schema/type/type.html.twig' as typeHelpers %}

    <table class="jsb--infolist">
        {% if schema.minProperties is not null
            or schema.maxProperties is not null %}
            <tr>
                <th>Property count range</th>
                <td>
                    <code>{{ schema.minProperties|default(0) }}</code>
                    &lt;
                    <var>count</var>
                    {% if schema.maxProperties is not null %}
                        &lt;
                        <code>{{ schema.maxProperties }}</code>
                    {% endif %}
                    <table class="jsb--infolist">
                        {% if schema.minProperties is not null %}
                            <tr id="{{ typeHelpers.getId(path|default(['requirements']), 'minProperties') }}">
                                <th><code>minProperties</code></th>
                                <td><code>{{ schema.minProperties }}</code></td>
                            </tr>
                        {% endif %}
                        {% if schema.maxProperties is not null %}
                            <tr id="{{ typeHelpers.getId(path|default(['requirements']), 'maxProperties') }}">
                                <th><code>maxProperties</code></th>
                                <td><code>{{ schema.maxProperties }}</code></td>
                            </tr>
                        {% endif %}
                    </table>
                </td>
            </tr>
        {% endif %}
        {% if schema.additionalProperties is not schema_type %}
            <tr id="{{ typeHelpers.getId(path|default(['requirements']), 'additionalProperties') }}">
                <th><code>additionalProperties</code></th>
                <td><code>{{ typeHelpers.renderAsBoolean(schema.additionalProperties) }}</code></td>
            </tr>
        {% endif %}
    </table>
{% endblock %}

{% block requirements %}
    {% import '@JsonSchema/schema/type/type.html.twig' as typeHelpers %}

    {# required #}
    {% if schema.required %}
        <div id="{{ typeHelpers.getId(path|merge(['required'])) }}" class="card">
            <div class="card-header">
                <h3><code>required</code></h3>
                <div class="jsb--schema--show--type">array</div>
            </div>
            <div class="card-body">
                <ul>
                    {% for reqKey, reqSchema in schema.required %}
                        <li><code>{{ reqKey }}</code></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    {% endif %}

    {# properties #}
    {% if schema.properties %}
        {{ typeHelpers.renderContainer('properties', 'object', schema.properties, path|merge(['properties'])) }}
    {% endif %}

    {# patternProperties #}
    {% if schema.patternProperties %}
        {{ typeHelpers.renderContainer('patternProperties', 'object', schema.patternProperties, path|merge(['patternProperties'])) }}
    {% endif %}

    {# additionalProperties #}
    {% if schema.additionalProperties is schema_type %}
        <div id="{{ typeHelpers.getId(path, 'additionalProperties') }}">
            {{ typeHelpers.renderSchema(schema.additionalProperties, path|merge(['additionalProperties']), 'additionalProperties') }}
        </div>
    {% endif %}

    {# propertyNames #}
    {% if schema.propertyNames %}
        <div id="{{ typeHelpers.getId(path, 'propertyNames') }}">
            {{ typeHelpers.renderSchema(schema.propertyNames, path|merge(['propertyNames']), 'propertyNames') }}
        </div>
    {% endif %}

    {# dependencies #}
    {% if schema.dependencies %}
        <div id="{{ typeHelpers.getId(path, 'dependencies') }}">
            {% for dependent_key, dependency in schema.dependencies %}
                {% if dependency is schema_type %}
                    {# Full schema to validate against #}
                    {{ typeHelpers.renderSchema(dependency, path|merge(['dependencies', dependent_key]), dependent_key) }}
                {% else %}
                    {# Depends only on specific properties existing #}
                    <ul>
                        {% for dependency_key, dependency_target in dependency %}
                            <li><code>{{ dependency_key }}</code> must be set.</li>
                        {% endfor %}
                    </ul>
                {% endif %}
            {% endfor %}
        </div>
    {% endif %}
{% endblock %}
